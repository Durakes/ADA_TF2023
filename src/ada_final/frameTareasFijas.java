/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ada_final;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jesus
 */
public class frameTareasFijas extends javax.swing.JFrame {

    /**
     * Creates new form frameTareasFijas
     */
    
    // Crea un modelo de tabla
    DefaultTableModel modeloTabla = new DefaultTableModel();
    public Algoritmo algoritmo = new Algoritmo();

    public frameTareasFijas() {
        initComponents();
    }
    
    // Constructor que recibe un objeto Algoritmo
    public frameTareasFijas(Algoritmo algoritmoPasado) {
        algoritmo = algoritmoPasado;
        
        initComponents();  // Asegúrate de llamar a este método en tu constructor.
        parametrizarTabla();
        actualizarTablaTareasFijas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cboDias = new javax.swing.JComboBox<>();
        cboHora = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtHistorial = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtTareaFija = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Establecer Hora Fija");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Seleccionar Dia: ");

        jLabel2.setText("Seleccionar Hora: ");

        cboDias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo", " " }));
        cboDias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDiasActionPerformed(evt);
            }
        });

        cboHora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7am", "8am", "9am", "10am", "11am", "12am", "1pm", "2pm", "3pm", "4pm", "5pm", "6pm", "7pm", "8pm", "9pm", "10pm" }));
        cboHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboHoraActionPerformed(evt);
            }
        });

        txtHistorial.setColumns(20);
        txtHistorial.setRows(5);
        jScrollPane1.setViewportView(txtHistorial);

        jButton2.setText("Regresar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel3.setText("Nombre Tarea Fija ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cboHora, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(163, 163, 163)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cboDias, 0, 207, Short.MAX_VALUE)
                            .addComponent(txtTareaFija))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtTareaFija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboDias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboHoraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboHoraActionPerformed

    public void parametrizarTabla()
    {
        // Crea un modelo de tabla
        modeloTabla = new DefaultTableModel();
        jTable1.setModel(modeloTabla);

        // Agrega las columnas al modelo de la tabla
        modeloTabla.addColumn(""); // Columna vacía para horas
        for (int i = 0; i < algoritmo.diasDeLaSemana; i++) {
            modeloTabla.addColumn(getNombreDia(i));
        }
    }
    
    // Método para actualizar la tabla con las tareas fijas
    private void actualizarTablaTareasFijas() {
        modeloTabla.setRowCount(0);
        // Obtén los resultados del calendario
        boolean[][] calendario = algoritmo.calendarioBool;
        String[][] nombresActividades = algoritmo.calendarioFinal;

        /*
        // Crea un modelo de tabla
        DefaultTableModel modeloTabla = new DefaultTableModel();
        jTable1.setModel(modeloTabla); // jTableTareasFijas es tu JTable

        // Agrega las columnas al modelo de la tabla
        modeloTabla.addColumn(""); // Columna vacía para horas
        for (int i = 0; i < algoritmo.diasDeLaSemana; i++) {
            modeloTabla.addColumn(getNombreDia(i));
        }
        */
        
        // Agrega los datos al modelo de la tabla
        int horaIni = 7;
        for (int hora = 0; hora < algoritmo.horasDelDia; hora++) {
            Object[] fila = new Object[algoritmo.diasDeLaSemana + 1];
            fila[0] = horaIni + "-" + (horaIni + 1);
            for (int dia = 0; dia < algoritmo.diasDeLaSemana; dia++) {
                fila[dia + 1] = nombresActividades[dia][hora];
            }
            modeloTabla.addRow(fila);
            horaIni++;
        }
        
        /*
        // Agrega los datos al modelo de la tabla
        int horaIni = 7;
        for (int hora = 0; hora < algoritmo.horasDelDia; hora++) {
            Object[] fila = new Object[algoritmo.diasDeLaSemana + 1];
            fila[0] = horaIni + "-" + (horaIni + 1);
            for (int dia = 0; dia < algoritmo.diasDeLaSemana; dia++) {
                fila[dia + 1] = calendario[dia][hora] ? "1" : "0";
            }
            modeloTabla.addRow(fila);
            horaIni++;
        }
        */
    }
    
    // Método para obtener el nombre del día según el índice
    private String getNombreDia(int indice) {
        String[] nombresDias = {"Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom"};
        return nombresDias[indice];
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //Algoritmo algoritmo = new Algoritmo();
         // Obtener el número correspondiente al día seleccionado
        String diaSeleccionado = cboDias.getSelectedItem().toString();
        int numeroDia = obtenerNumeroDia(diaSeleccionado);
        System.out.println("Número del día seleccionado: " + numeroDia);

        // Obtener el número correspondiente a la hora seleccionada
        String horaSeleccionada = cboHora.getSelectedItem().toString();
        int numeroHora = obtenerNumeroHora(horaSeleccionada);
        System.out.println("Número de la hora seleccionada: " + numeroHora);
        
        // Obtener el nombre de la tarea desde el JTextField
        String nombreTarea = txtTareaFija.getText();

        
        // Agregar tarea fija al calendario
        if (numeroDia != -1 && numeroHora != -1) {
            algoritmo.calendarioBool[numeroDia][numeroHora] = true;
            algoritmo.calendarioFinal[numeroDia][numeroHora] = nombreTarea;
            System.out.println("Tarea fija agregada al calendario en el día " + diaSeleccionado + ", a las " + horaSeleccionada);
            String mensaje = "Tarea fija agregada al calendario en el día " + diaSeleccionado + ", a las " + horaSeleccionada + "\n";
            txtHistorial.append(mensaje);
            
            // Actualiza la tabla con las tareas fijas
            actualizarTablaTareasFijas();
            
            //limpiar campo
            txtTareaFija.setText("");
        } else {
            System.out.println("Error: No se pudo agregar la tarea fija al calendario. Día o hora no reconocidos.");
            String mensajeError = "Error: No se pudo agregar la tarea fija al calendario. Día o hora no reconocidos.\n";
            txtHistorial.append(mensajeError);
            
            //limpiar campo
            txtTareaFija.setText("");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cboDiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDiasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboDiasActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        mainMenu frame1 = new mainMenu(algoritmo);
        frame1.setVisible(true);
        this.dispose();  // Cierra el JFrame3 al abrir el JFrame1
    }//GEN-LAST:event_jButton2ActionPerformed

    
    public int obtenerNumeroDia(String diaSeleccionado)
    {
        switch (diaSeleccionado) {
            case "Lunes":
                return 0;
            case "Martes":
                return 1;
            case "Miercoles":
                return 2;
            case "Jueves":
                return 3;
            case "Viernes":
                return 4;
            case "Sabado":
                return 5;
            case "Domingo":
                return 6;
            default:
                return -1; // Valor por defecto si no se reconoce el día
        }
    }
    
    public int obtenerNumeroHora(String horaSeleccionada)
    {
        switch (horaSeleccionada) {
            case "7am":
                return 0;
            case "8am":
                return 1;
            case "9am":
                return 2;
            case "10am":
                return 3;
            case "11am":
                return 4;
            case "12am":
                return 5;
            case "1pm":
                return 6;
            case "2pm":
                return 7;
            case "3pm":
                return 8;
            case "4pm":
                return 9;
            case "5pm":
                return 10;
            case "6pm":
                return 11;
            case "7pm":
                return 12;
            case "8pm":
                return 13;
            case "9pm":
                return 14;
            case "10pm":
                return 15;
            default:
                return -1; // Valor por defecto si no se reconoce la hora
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameTareasFijas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameTareasFijas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameTareasFijas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameTareasFijas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frameTareasFijas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboDias;
    private javax.swing.JComboBox<String> cboHora;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea txtHistorial;
    private javax.swing.JTextField txtTareaFija;
    // End of variables declaration//GEN-END:variables
}
